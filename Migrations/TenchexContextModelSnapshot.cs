// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenchex.Models;

#nullable disable

namespace Tenchex.Migrations
{
    [DbContext(typeof(TenchexContext))]
    partial class TenchexContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tenchex.Models.Cables", b =>
                {
                    b.Property<int>("CableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CableId"));

                    b.Property<int>("CableType")
                        .HasColumnType("int");

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CableId");

                    b.ToTable("Cables", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Compressors", b =>
                {
                    b.Property<int>("CompressorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompressorId"));

                    b.Property<int>("CompressorType")
                        .HasColumnType("int");

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CompressorId");

                    b.ToTable("Compressors", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.DiffrentialPressureGauge", b =>
                {
                    b.Property<int>("DiffrentialPressureGaugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiffrentialPressureGaugeId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BlowOutProtection")
                        .HasColumnType("bit");

                    b.Property<bool?>("CabillaryTubes")
                        .HasColumnType("bit");

                    b.Property<string>("CabillaryTubesMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseFilling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DialSize")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DiaphragmSeal")
                        .HasColumnType("bit");

                    b.Property<string>("DiaphragmSealMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Manifold")
                        .HasColumnType("bit");

                    b.Property<string>("ManifoldMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManifoldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MountingBracket")
                        .HasColumnType("bit");

                    b.Property<string>("MountingBracketMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OverPressureProtector")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Siphone")
                        .HasColumnType("bit");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiffrentialPressureGaugeId");

                    b.ToTable("DiffrentialPressureGauge", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.DiffrentialPressureTransmitter", b =>
                {
                    b.Property<int>("DiffrentialPressureTransmitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiffrentialPressureTransmitterId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CabillaryTubes")
                        .HasColumnType("bit");

                    b.Property<string>("CabillaryTubesMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CallibrationRange")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DiaphragmSeal")
                        .HasColumnType("bit");

                    b.Property<string>("DiaphragmSealMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HousingMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Installation")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("KeyPad")
                        .HasColumnType("bit");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Lcd")
                        .HasColumnType("bit");

                    b.Property<bool?>("Manifold")
                        .HasColumnType("bit");

                    b.Property<string>("ManifoldMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManifoldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MountingBracket")
                        .HasColumnType("bit");

                    b.Property<string>("MountingBracketMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("_420mA")
                        .HasColumnType("bit");

                    b.HasKey("DiffrentialPressureTransmitterId");

                    b.ToTable("DiffrentialPressureTransmitter", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("Departments")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Equipments", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeesEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentCategory")
                        .HasColumnType("int");

                    b.Property<short>("Quantities")
                        .HasColumnType("smallint");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SuppliersSupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemsSystemId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypesTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("UnitePrice")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsVendorID")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.HasIndex("SuppliersSupplierId");

                    b.HasIndex("SystemsSystemId");

                    b.HasIndex("TypesTypeId");

                    b.HasIndex("VendorsVendorID");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Instrumentations", b =>
                {
                    b.Property<int>("InstrumentationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstrumentationId"));

                    b.Property<int?>("DiffrentialPressureGaugeId")
                        .HasColumnType("int");

                    b.Property<int?>("DiffrentialPressureTransmitterId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentType")
                        .HasColumnType("int");

                    b.Property<int?>("PressureGaugeId")
                        .HasColumnType("int");

                    b.Property<int?>("PressureTransmitterId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureGaugeId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureTransmitterId")
                        .HasColumnType("int");

                    b.HasKey("InstrumentationId");

                    b.HasIndex("DiffrentialPressureGaugeId");

                    b.HasIndex("DiffrentialPressureTransmitterId");

                    b.HasIndex("PressureGaugeId");

                    b.HasIndex("PressureTransmitterId");

                    b.HasIndex("TemperatureGaugeId");

                    b.HasIndex("TemperatureTransmitterId");

                    b.ToTable("Instrumentations", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Pipes", b =>
                {
                    b.Property<int>("PipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PipeId"));

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("NominalDiameter")
                        .HasColumnType("smallint");

                    b.HasKey("PipeId");

                    b.ToTable("Pipes", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.PressureGauge", b =>
                {
                    b.Property<int>("PressureGaugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PressureGaugeId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BlowOutProtection")
                        .HasColumnType("bit");

                    b.Property<bool?>("CabillaryTubes")
                        .HasColumnType("bit");

                    b.Property<string>("CabillaryTubesMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseFilling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DialSize")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DiaphragmSeal")
                        .HasColumnType("bit");

                    b.Property<string>("DiaphragmSealMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Manifold")
                        .HasColumnType("bit");

                    b.Property<string>("ManifoldMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManifoldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MountingBracket")
                        .HasColumnType("bit");

                    b.Property<string>("MountingBracketMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OverPressureProtector")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Siphone")
                        .HasColumnType("bit");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PressureGaugeId");

                    b.ToTable("PressureGauge", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.PressureTransmitter", b =>
                {
                    b.Property<int>("PressureTransmitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PressureTransmitterId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CabillaryTubes")
                        .HasColumnType("bit");

                    b.Property<string>("CabillaryTubesMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CallibrationRange")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DiaphragmSeal")
                        .HasColumnType("bit");

                    b.Property<string>("DiaphragmSealMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HousingMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Installation")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("KeyPad")
                        .HasColumnType("bit");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Lcd")
                        .HasColumnType("bit");

                    b.Property<bool?>("Manifold")
                        .HasColumnType("bit");

                    b.Property<string>("ManifoldMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManifoldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MountingBracket")
                        .HasColumnType("bit");

                    b.Property<string>("MountingBracketMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("_420mA")
                        .HasColumnType("bit");

                    b.HasKey("PressureTransmitterId");

                    b.ToTable("PressureTransmitter", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("ProjectCatogry")
                        .HasColumnType("int");

                    b.Property<string>("ProjectConsultant")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProjectLocation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProjectOwner")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Pumps", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PumpId"));

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PumpTypes")
                        .HasColumnType("int");

                    b.HasKey("PumpId");

                    b.ToTable("Pumps", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierOrigin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Systems", b =>
                {
                    b.Property<int>("SystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemId"));

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SystemFluid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SystemId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("Systems", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Tanks", b =>
                {
                    b.Property<int>("TankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TankId"));

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TankDimensions")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TankId");

                    b.ToTable("Tanks", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.TemperatureGauge", b =>
                {
                    b.Property<int>("TemperatureGaugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperatureGaugeId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseFilling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DialSize")
                        .HasColumnType("smallint");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("EmersionLength")
                        .HasColumnType("smallint");

                    b.Property<string>("GlassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("InsertionLength")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionToThermowell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("StemDiameter")
                        .HasColumnType("tinyint");

                    b.Property<short?>("StemLength")
                        .HasColumnType("smallint");

                    b.Property<string>("ThermowellProcessConnection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThermowellProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThermowellType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TotalLength")
                        .HasColumnType("smallint");

                    b.Property<bool?>("WaveFrequencyCalculation")
                        .HasColumnType("bit");

                    b.HasKey("TemperatureGaugeId");

                    b.ToTable("TemperatureGauge", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.TemperatureTransmitter", b =>
                {
                    b.Property<int>("TemperatureTransmitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperatureTransmitterId"));

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint");

                    b.Property<string>("AreaClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CallibrationRange")
                        .HasColumnType("smallint");

                    b.Property<string>("ElementMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("EmersionLength")
                        .HasColumnType("smallint");

                    b.Property<string>("HousingMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("InsertionLength")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("KeyPad")
                        .HasColumnType("bit");

                    b.Property<string>("Kks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Lcd")
                        .HasColumnType("bit");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessConnectionToThermowell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Repeatabilty")
                        .HasColumnType("tinyint");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SpanRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("StemDiameter")
                        .HasColumnType("tinyint");

                    b.Property<short?>("StemLength")
                        .HasColumnType("smallint");

                    b.Property<string>("ThermowellProcessConnection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThermowellProcessConnectionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThermowellType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TotalLength")
                        .HasColumnType("smallint");

                    b.Property<bool?>("WaveFrequencyCalculation")
                        .HasColumnType("bit");

                    b.Property<bool?>("_420mA")
                        .HasColumnType("bit");

                    b.HasKey("TemperatureTransmitterId");

                    b.ToTable("TemperatureTransmitter", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Types", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int?>("CableId")
                        .HasColumnType("int");

                    b.Property<int?>("CablesCableId")
                        .HasColumnType("int");

                    b.Property<int?>("CompressorId")
                        .HasColumnType("int");

                    b.Property<int?>("CompressorsCompressorId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentationsInstrumentationId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeId")
                        .HasColumnType("int");

                    b.Property<int?>("PipesPipeId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<int?>("PumpsPumpId")
                        .HasColumnType("int");

                    b.Property<int?>("TankId")
                        .HasColumnType("int");

                    b.Property<int?>("TanksTankId")
                        .HasColumnType("int");

                    b.Property<int?>("ValveId")
                        .HasColumnType("int");

                    b.Property<int?>("ValvesValveId")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.HasIndex("CablesCableId");

                    b.HasIndex("CompressorsCompressorId");

                    b.HasIndex("InstrumentationsInstrumentationId");

                    b.HasIndex("PipesPipeId");

                    b.HasIndex("PumpsPumpId");

                    b.HasIndex("TanksTankId");

                    b.HasIndex("ValvesValveId");

                    b.ToTable("Types", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Valves", b =>
                {
                    b.Property<int>("ValveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValveId"));

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<string>("KKS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ValveType")
                        .HasColumnType("int");

                    b.HasKey("ValveId");

                    b.ToTable("Valves", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Vendors", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorID"));

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorOrigin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VendorID");

                    b.ToTable("Vendors", (string)null);
                });

            modelBuilder.Entity("Tenchex.Models.Equipments", b =>
                {
                    b.HasOne("Tenchex.Models.Employees", "Employees")
                        .WithMany("Equipments")
                        .HasForeignKey("EmployeesEmployeeId");

                    b.HasOne("Tenchex.Models.Suppliers", "Suppliers")
                        .WithMany("Equipments")
                        .HasForeignKey("SuppliersSupplierId");

                    b.HasOne("Tenchex.Models.Systems", "Systems")
                        .WithMany("Equipments")
                        .HasForeignKey("SystemsSystemId");

                    b.HasOne("Tenchex.Models.Types", "Types")
                        .WithMany("Equipments")
                        .HasForeignKey("TypesTypeId");

                    b.HasOne("Tenchex.Models.Vendors", "Vendors")
                        .WithMany("Equipments")
                        .HasForeignKey("VendorsVendorID");

                    b.Navigation("Employees");

                    b.Navigation("Suppliers");

                    b.Navigation("Systems");

                    b.Navigation("Types");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Tenchex.Models.Instrumentations", b =>
                {
                    b.HasOne("Tenchex.Models.DiffrentialPressureGauge", "DiffrentialPressureGauge")
                        .WithMany("Instrumentations")
                        .HasForeignKey("DiffrentialPressureGaugeId");

                    b.HasOne("Tenchex.Models.DiffrentialPressureTransmitter", "DiffrentialPressureTransmitter")
                        .WithMany("Instrumentations")
                        .HasForeignKey("DiffrentialPressureTransmitterId");

                    b.HasOne("Tenchex.Models.PressureGauge", "PressureGauge")
                        .WithMany("Instrumentations")
                        .HasForeignKey("PressureGaugeId");

                    b.HasOne("Tenchex.Models.PressureTransmitter", "PressureTransmitter")
                        .WithMany("Instrumentations")
                        .HasForeignKey("PressureTransmitterId");

                    b.HasOne("Tenchex.Models.TemperatureGauge", "TemperatureGauge")
                        .WithMany("Instrumentations")
                        .HasForeignKey("TemperatureGaugeId");

                    b.HasOne("Tenchex.Models.TemperatureTransmitter", "TemperatureTransmitter")
                        .WithMany("Instrumentations")
                        .HasForeignKey("TemperatureTransmitterId");

                    b.Navigation("DiffrentialPressureGauge");

                    b.Navigation("DiffrentialPressureTransmitter");

                    b.Navigation("PressureGauge");

                    b.Navigation("PressureTransmitter");

                    b.Navigation("TemperatureGauge");

                    b.Navigation("TemperatureTransmitter");
                });

            modelBuilder.Entity("Tenchex.Models.Systems", b =>
                {
                    b.HasOne("Tenchex.Models.Projects", "Projects")
                        .WithMany("Systems")
                        .HasForeignKey("ProjectsProjectId");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Tenchex.Models.Types", b =>
                {
                    b.HasOne("Tenchex.Models.Cables", "Cables")
                        .WithMany("Types")
                        .HasForeignKey("CablesCableId");

                    b.HasOne("Tenchex.Models.Compressors", "Compressors")
                        .WithMany("Types")
                        .HasForeignKey("CompressorsCompressorId");

                    b.HasOne("Tenchex.Models.Instrumentations", "Instrumentations")
                        .WithMany()
                        .HasForeignKey("InstrumentationsInstrumentationId");

                    b.HasOne("Tenchex.Models.Pipes", "Pipes")
                        .WithMany("Types")
                        .HasForeignKey("PipesPipeId");

                    b.HasOne("Tenchex.Models.Pumps", "Pumps")
                        .WithMany("Types")
                        .HasForeignKey("PumpsPumpId");

                    b.HasOne("Tenchex.Models.Tanks", "Tanks")
                        .WithMany("Types")
                        .HasForeignKey("TanksTankId");

                    b.HasOne("Tenchex.Models.Valves", "Valves")
                        .WithMany("Types")
                        .HasForeignKey("ValvesValveId");

                    b.Navigation("Cables");

                    b.Navigation("Compressors");

                    b.Navigation("Instrumentations");

                    b.Navigation("Pipes");

                    b.Navigation("Pumps");

                    b.Navigation("Tanks");

                    b.Navigation("Valves");
                });

            modelBuilder.Entity("Tenchex.Models.Cables", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.Compressors", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.DiffrentialPressureGauge", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.DiffrentialPressureTransmitter", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.Employees", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Tenchex.Models.Pipes", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.PressureGauge", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.PressureTransmitter", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.Projects", b =>
                {
                    b.Navigation("Systems");
                });

            modelBuilder.Entity("Tenchex.Models.Pumps", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.Suppliers", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Tenchex.Models.Systems", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Tenchex.Models.Tanks", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.TemperatureGauge", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.TemperatureTransmitter", b =>
                {
                    b.Navigation("Instrumentations");
                });

            modelBuilder.Entity("Tenchex.Models.Types", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Tenchex.Models.Valves", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("Tenchex.Models.Vendors", b =>
                {
                    b.Navigation("Equipments");
                });
#pragma warning restore 612, 618
        }
    }
}
